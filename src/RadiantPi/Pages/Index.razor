@*
 * RadiantPi.Lumagen - Communication client for Lumagen RadiancePro
 * Copyright (C) 2020-2021 - Steve G. Bjorg
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 *@

@page "/"

@using RadiantPi.Lumagen.Model

@implements IDisposable

@inject IRadiancePro Client

<h1>Status</h1>

<h2>Device</h2>
<form>
    <fieldset disabled=@Disabled>
        @RenderLabel("device-model-name", "Model Name", DeviceInfo?.ModelName ?? "(loading...)")
        @RenderLabel("device-model-nr", "Model Nr", DeviceInfo?.ModelNumber ?? "(loading...)")
        @RenderLabel("device-serial-nr", "Serial Nr", DeviceInfo?.SerialNumber ?? "(loading...)")
        @RenderLabel("device-software-revision", "Software", DeviceInfo?.SoftwareRevision ?? "(loading...)")
    </fieldset>
</form>

<h2>Input</h2>
<form>
    <fieldset disabled=@Disabled>
        @RenderLabel("input-status", "Status", ModeInfo?.InputStatus.ToString() ?? "(loading...)")
        @RenderLabel("input-active-config", "Active Configuration", ModeInfo?.ActiveInputConfigNumber ?? "(loading...)")
        @RenderLabel("source-vertical-resolution", "Vertical Resolution", InputVerticalResolution ?? "(loading...)")
        @RenderLabel("source-vertical-refresh-rate", "Refresh Rate", InputVerticalRefreshRate ?? "(loading...)")
        @RenderLabel("source-raster-aspect-ratio", "Aspect Ratio (Content)", SourceContentAspectRatio ?? "(loading...)")
        @RenderLabel("source-content-aspect-ratio", "Aspect Ratio (Source)", SourceRasterAspectRatio ?? "(loading...)")
        @RenderLabel("source-dynamic-range", "Dynamic Range", ModeInfo?.SourceDynamicRange.ToString() ?? "(loading...)")
        @RenderLabel("source-3d-mode", "3D Mode", ModeInfo?.Source3DMode.ToString() ?? "(loading...)")
        @RenderLabel("detected-content-aspect-ratio", "Detected Aspect Ratio (Content)", DetectedAspectRatio ?? "(loading...)")
        @RenderLabel("detected-raster-aspect-ratio", "Detected Aspect Ratio (Raster)", DetectedRasterAspectRatio ?? "(loading...)")
    </fieldset>
</form>

<h2>Output</h2>
<form>
    <fieldset disabled=@Disabled>
        @RenderLabel("output-enabled", "Outputs", OutputEnabled ?? "(loading...)")
        @RenderLabel("output-vertical-resolution", "Vertial Resolution", OutputVerticalResolution ?? "(loading...)")
        @RenderLabel("output-vertical-refresh-rate", "Refresh Rate", OutputVerticalRefreshRate ?? "(loading...)")
        @RenderLabel("output-aspect-ratio-nls", "Aspect Ratio", OutputAspectRatio ?? "(loading...)")
        @RenderLabel("output-color-space", "Color Space", ModeInfo?.OutputColorSpace.ToString() ?? "(loading...)")
        @RenderLabel("output-cms", "CMS", OutputCmsLabel ?? "(loading...)")
        @RenderLabel("output-style", "Style", OutputStyleLabel ?? "(loading...)")
        @RenderLabel("output-3d-mode", "3D Mode", ModeInfo?.Output3DMode.ToString() ?? "(loading...)")
    </fieldset>
</form>

@code {

    //--- Fields ---
    private Dictionary<RadianceProStyle, string> _styleLabels = new();
    private Dictionary<RadianceProCms, string> _cmsLabels = new();

    //--- Properties ---
    private bool Disabled { get; set; } = true;

    private string InputVerticalResolution => (ModeInfo is not null)
        ? ToResolution(ModeInfo.SourceVerticalResolution, ModeInfo.SourceVideoMode)
        : null;

    private string InputVerticalRefreshRate => (ModeInfo is not null)
        ? ToRefreshRate(ModeInfo.SourceVerticalRate)
        : null;

    private string SourceContentAspectRatio => (ModeInfo is not null)
        ? ToAspectRatio(ModeInfo.SourceContentAspectRatio)
        : null;

    private string DetectedRasterAspectRatio => (ModeInfo is not null)
        ? ToAspectRatio(ModeInfo.DetectedRasterAspectRatio)
        : null;

    private string DetectedAspectRatio => (ModeInfo is not null)
        ? ToAspectRatio(ModeInfo.DetectedAspectRatio)
        : null;

    private string SourceRasterAspectRatio => (ModeInfo is not null)
        ? ToAspectRatio(ModeInfo.SourceRasterAspectRatio)
        : null;

    private string OutputEnabled => (ModeInfo is not null)
        ? Convert.ToString(ModeInfo.OutputEnabled, 2).PadLeft(16, '0')
        : null;

    private string OutputVerticalResolution => (ModeInfo is not null)
        ? ToResolution(ModeInfo.OutputVerticalResolution, ModeInfo.OutputVideoMode)
        : null;

    private string OutputVerticalRefreshRate => (ModeInfo is not null)
        ? ToRefreshRate(ModeInfo.OutputVerticalRate)
        : null;

    private string OutputAspectRatio => (ModeInfo is not null)
        ? ToAspectRatio(ModeInfo.OutputAspectRatio, ModeInfo.OutputNonLinearStretchActive)
        : null;


    private string OutputCmsLabel { get; set; }
    private string OutputStyleLabel { get; set; }
    private GetDeviceInfoResponse DeviceInfo { get; set; }
    private RadianceProModeInfo ModeInfo { get; set; }

    //--- Methods ---
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        // initialize UI
        DeviceInfo = await Client.GetDeviceInfoAsync();
        ModeInfo = await Client.GetModeInfoAsync();
        OutputStyleLabel = await GetStyleLabelAsync(ModeInfo.OutputStyle);
        OutputCmsLabel = await GetCmsLabelAsync(ModeInfo.OutputCms);
        Disabled = false;

        // register event handler for mode changes
        Client.ModeInfoChanged += OnModeInfoChanged;
    }

    private RenderFragment RenderLabel(string id, string title, string value) {
        return @<div class="form-group row">
            <label for=@id class="col-sm col-xl-3 col-form-label">@title</label>
            <div class="col-sm col-xl-3">
                <input class="form-control" id=@id value=@value readonly>
            </div>
        </div>;
    }

    private string ToResolution(string resolution, RadianceProVideoMode mode) {
        switch(mode) {
        case RadianceProVideoMode.Progressive:
            return resolution + "p";
        case RadianceProVideoMode.Interlaced:
            return resolution + "i";
        default:
            return resolution + $" ({mode})";
        }
    }

    private string ToAspectRatio(string aspectRatio, bool nls = false) {
        var result = (aspectRatio.Length == 3) && aspectRatio.All(c => char.IsDigit(c))
            ? $"{aspectRatio[0]}.{aspectRatio.Substring(1)}"
            : aspectRatio;
        return nls
            ? result + " (NLS)"
            : result;
    }

    private string ToRefreshRate(string refreshRate)
        => refreshRate switch {
            "023" => "23.98 FPS",
            "024" => "24 FPS",
            "025" => "25 FPS",
            "029" => "29.97 FPS",
            "030" => "30 FPS",
            "050" => "50 FPS",
            "059" => "59.94 FPS",
            "060" => "60 FPS",
            _ => refreshRate
        };

    private void OnModeInfoChanged(object sender, ModeInfoChangedEventArgs args) =>
        InvokeAsync(async () => {

            // TODO: remove this code
            Console.WriteLine("OnModeInfoChanged received");

            // update mode info and refresh state
            ModeInfo = args.ModeInfo;
            OutputStyleLabel = await GetStyleLabelAsync(ModeInfo.OutputStyle);
            OutputCmsLabel = await GetCmsLabelAsync(ModeInfo.OutputCms);
            StateHasChanged();
        });

    private async Task<string> GetStyleLabelAsync(RadianceProStyle style) {
        if(!_styleLabels.TryGetValue(style, out var result)) {
            result = await Client.GetStyleLabelAsync(style);
            _styleLabels[style] = result;
        }
        return result;
    }

    private async Task<string> GetCmsLabelAsync(RadianceProCms cms) {
        if(!_cmsLabels.TryGetValue(cms, out var result)) {
            result = await Client.GetCmsLabelAsync(cms);
            _cmsLabels[cms] = result;
        }
        return result;
    }

    //--- IDisposable Members ---
    void IDisposable.Dispose() {
        Console.WriteLine("OnModeInfoChanged handler removed");
        Client.ModeInfoChanged -= OnModeInfoChanged;
    }
}