@*
 * RadiantPi.Lumagen - Communication client for Lumagen RadiancePro
 * Copyright (C) 2020-2021 - Steve G. Bjorg
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 *@

@page "/cms-labels"

@inject IRadiancePro Client

<h1>CMS Labels</h1>

<form>
    <fieldset disabled=@Disabled>
        @for(var cms = RadianceProCms.Cms0; cms <= RadianceProCms.Cms7; ++cms) {
            var localCms = cms;
            <div class="mb-3">
                <Label
                    Id=@localCms.ToString()
                    Text=@($"CMS {(int)localCms} Label")
                    OriginalValue=@GetOriginalLabel(localCms)
                    CurrentValue=@GetCurrentLabel(localCms)
                    OnValueChange=@(value => CurrentLabels[localCms] = value)
                    OnClick="@(async () => await UpdateCmsAsync(localCms))"
                />
            </div>
        }
    </fieldset>
</form>

@code {

    //--- Properties ---
    protected Dictionary<RadianceProCms, string> OriginalLabels = new Dictionary<RadianceProCms, string>();
    protected Dictionary<RadianceProCms, string> CurrentLabels = new Dictionary<RadianceProCms, string>();
    protected bool Disabled { get; set; } = true;

    //--- Methods ---
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        // read all labels from device
        for(var cms = RadianceProCms.Cms0; cms <= RadianceProCms.Cms7; ++cms) {
            var label = await Client.GetCmsLabelAsync(cms);
            CurrentLabels[cms] = label;
            OriginalLabels[cms] = label;
        }
        Disabled = false;
    }

    protected async Task UpdateCmsAsync(RadianceProCms cms) {
        var label = CurrentLabels[cms];
        await Client.SetCmsLabelAsync(cms, label);
        label = await Client.GetCmsLabelAsync(cms);
        CurrentLabels[cms] = label;
        OriginalLabels[cms] = label;
    }

    private string GetOriginalLabel(RadianceProCms cms)
        => OriginalLabels.TryGetValue(cms, out var value)
            ? value
            : "(loading...)";

    private string GetCurrentLabel(RadianceProCms cms)
        => CurrentLabels.TryGetValue(cms, out var value)
            ? value
            : "(loading...)";
}
