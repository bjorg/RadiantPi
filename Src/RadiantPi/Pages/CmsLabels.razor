@page "/cms-labels"

@inject IRadiancePro Client

<h1>CMS Labels</h1>

<form>
    <fieldset disabled=@Disabled>
        @for(var cms = RadianceProCms.Cms0; cms <= RadianceProCms.Cms7; ++cms) {
            var localCms = cms;
            <div class="mb-3">
                <Label
                    Id=@localCms.ToString()
                    Text=@($"CMS {(int)localCms} Label")
                    OriginalValue=@GetOriginalLabel(localCms)
                    CurrentValue=@GetCurrentLabel(localCms)
                    OnValueChange=@(value => CurrentLabels[localCms] = value)
                    OnClick="@(async () => await UpdateStyleAsync(localCms))"
                />
            </div>
        }
    </fieldset>
</form>

@code {

    //--- Properties ---
    protected Dictionary<RadianceProCms, string> OriginalLabels = new Dictionary<RadianceProCms, string>();
    protected Dictionary<RadianceProCms, string> CurrentLabels = new Dictionary<RadianceProCms, string>();
    protected bool Disabled { get; set; } = true;

    //--- Methods ---
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        // read all style labels from device
        for(var cms = RadianceProCms.Cms0; cms <= RadianceProCms.Cms7; ++cms) {
            var label = await Client.GetCmsLabel(cms);
            CurrentLabels[cms] = label;
            OriginalLabels[cms] = label;
        }
        Disabled = false;
    }

    protected async Task UpdateStyleAsync(RadianceProCms cms) {
        var label = CurrentLabels[cms];
        await Client.SetCmsLabel(cms, label);
        OriginalLabels[cms] = label;
    }

    private string GetOriginalLabel(RadianceProCms cms)
        => OriginalLabels.TryGetValue(cms, out var value)
            ? value
            : "(loading...)";

    private string GetCurrentLabel(RadianceProCms cms)
        => CurrentLabels.TryGetValue(cms, out var value)
            ? value
            : "(loading...)";
}
