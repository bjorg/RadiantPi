@page "/style-labels"

@inject IRadiancePro Client

<h1>Style Labels</h1>

<form>
    <fieldset disabled=@StyleLabelsDisabled>
        @for(var style = RadianceProStyle.Style0; style <= RadianceProStyle.Style7; ++style) {
            var localStyleVar = style;
            <div class="mb-3">
                <Label
                    Id=@style.ToString()
                    Text=@($"Style {(int)style} Label")
                    OriginalValue=@OriginalLabels[style]
                    CurrentValue=@Labels[style]
                    OnValueChange=@(value => Labels[localStyleVar] = value)
                    OnClick="@(async () => await UpdateStyleAsync(localStyleVar))"
                />
            </div>
        }
    </fieldset>
</form>

@code {

    //--- Properties ---
    protected bool StyleLabelsDisabled { get; set; }
    protected Dictionary<RadianceProStyle, string> OriginalLabels = new Dictionary<RadianceProStyle, string>();
    protected Dictionary<RadianceProStyle, string> Labels = new Dictionary<RadianceProStyle, string>();

    //--- Methods ---
    protected override async Task OnInitializedAsync() {

        // read all style labels from device
        for(var style = RadianceProStyle.Style0; style <= RadianceProStyle.Style7; ++style) {
            var label = await Client.GetStyleLabel(style);
            Labels[style] = label;
            OriginalLabels[style] = label;
        }
        StyleLabelsDisabled = false;
    }

    protected async Task UpdateStyleAsync(RadianceProStyle style) {
        var label = Labels[style];
        await Client.SetStyleLabel(style, label);
        OriginalLabels[style] = label;
    }
}
