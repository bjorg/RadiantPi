@*
 * RadiantPi.Lumagen - Communication client for Lumagen RadiancePro
 * Copyright (C) 2020-2021 - Steve G. Bjorg
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 *@

@page "/"

@using RadiantPi.Lumagen.Model

@inject IRadiancePro Client

<h1>Status</h1>

<h2>Device</h2>
<form>
    <fieldset disabled=@Disabled>
        @RenderLabel("device-model-name", "Model Name", DeviceInfo.ModelName)
        @RenderLabel("device-model-nr", "Model Nr", DeviceInfo.ModelNumber)
        @RenderLabel("device-serial-nr", "Serial Nr", DeviceInfo.SerialNumber)
        @RenderLabel("device-software-revision", "Software", DeviceInfo.SoftwareRevision)
    </fieldset>
</form>

<h2>Input</h2>
<form>
    <fieldset disabled=@Disabled>
        @RenderLabel("input-physical-input", "Physical Input", ModeInfo.PhysicalInputSelected.ToString())
        @RenderLabel("input-virtual-input", "Virtual Input", ModeInfo.VirtualInputSelected.ToString())
        @RenderLabel("input-status", "Status", ModeInfo.InputStatus.ToString())
        @RenderLabel("input-active-config", "Active Configuration", ModeInfo.ActiveInputConfigNumber)
        @RenderLabel("source-vertical-resolution", "Vertical Resolution", InputVerticalResolution)
        @RenderLabel("source-vertical-refresh-rate", "Refresh Rate", InputVerticalRefreshRate)
        @RenderLabel("source-raster-aspect-ratio", "Aspect Ratio (Raster)", InputRasterAspectRatio)
        @RenderLabel("source-content-aspect-ratio", "Aspect Ratio (Content)", InputContentAspectRatio)
        @RenderLabel("source-dynamic-range", "Dynamic Range", ModeInfo.SourceDynamicRange.ToString())
        @RenderLabel("source-3d-mode", "3D Mode", ModeInfo.Source3DMode.ToString())
    </fieldset>
</form>

<h2>Output</h2>
<form>
    <fieldset disabled=@Disabled>
        @RenderLabel("output-enabled", "Outputs", Convert.ToString(ModeInfo.OutputEnabled, 2).PadLeft(16, '0'))
        @RenderLabel("output-vertical-resolution", "Vertial Resolution", OutputVerticalResolution)
        @RenderLabel("output-vertical-refresh-rate", "Refresh Rate", OutputVerticalRefreshRate)
        @RenderLabel("output-aspect-ratio-nls", "Aspect Ratio", OutputAspectRatio)
        @RenderLabel("output-color-space", "Color Space", ModeInfo.OutputColorSpace.ToString())
        @RenderLabel("output-cms", "CMS", OutputCmsLabel)
        @RenderLabel("output-style", "Style", OutputStyleLabel)
        @RenderLabel("output-3d-mode", "3D Mode", ModeInfo.Output3DMode.ToString())
    </fieldset>
</form>

@code {

    //--- Properties ---
    protected bool Disabled { get; set; } = true;
    protected string InputVerticalResolution { get; set; } = "(loading...)";
    protected string InputVerticalRefreshRate { get; set; } = "(loading...)";
    protected string InputContentAspectRatio { get; set; } = "(loading...)";
    protected string InputRasterAspectRatio { get; set; } = "(loading...)";
    protected string OutputVerticalResolution { get; set; } = "(loading...)";
    protected string OutputVerticalRefreshRate { get; set; } = "(loading...)";
    protected string OutputAspectRatio { get; set; } = "(loading...)";
    protected string OutputStyleLabel { get; set; } = "(loading...)";
    protected string OutputCmsLabel { get; set; } = "(loading...)";

    protected GetDeviceInfoResponse DeviceInfo { get; set; } = new GetDeviceInfoResponse {
        ModelName = "(loading...)",
        ModelNumber = "(loading...)",
        SerialNumber = "(loading...)",
        SoftwareRevision = "(loading...)"
    };

    protected GetModeInfoResponse ModeInfo { get; set; } = new GetModeInfoResponse {
        ActiveInputConfigNumber = "(loading...)",
        InputStatus = RadianceProInputStatus.Undefined,
        Output3DMode = RadiancePro3D.Undefined,
        OutputAspectRatio = "(loading...)",
        OutputCms = RadianceProCms.Undefined,
        OutputColorSpace = RadianceProColorSpace.Undefined,
        OutputEnabled = 0,
        OutputNonLinearStretchActive = false,
        OutputStyle = RadianceProStyle.Undefined,
        OutputVerticalRate = "(loading...)",
        OutputVerticalResolution = "(loading...)",
        OutputVideoMode = RadianceProVideoMode.Undefined,
        PhysicalInputSelected = 0,
        Source3DMode = RadiancePro3D.Undefined,
        SourceContentAspectRatio = "(loading...)",
        SourceDynamicRange = RadianceProDynamicRange.Undefined,
        SourceRasterAspectRatio = "(loading...)",
        SourceVerticalRate = "(loading...)",
        SourceVerticalResolution = "(loading...)",
        SourceVideoMode = RadianceProVideoMode.Undefined,
        VirtualInputSelected = 0
    };

    //--- Methods ---
    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        DeviceInfo = await Client.GetDeviceInfoAsync();
        ModeInfo = await Client.GetModeInfoAsync();
        InputVerticalResolution = ToResolution(ModeInfo.SourceVerticalResolution, ModeInfo.SourceVideoMode);
        InputVerticalRefreshRate = ToRefreshRate(ModeInfo.SourceVerticalRate);
        InputContentAspectRatio = ToAspectRatio(ModeInfo.SourceContentAspectRatio);
        InputRasterAspectRatio = ToAspectRatio(ModeInfo.SourceRasterAspectRatio);
        OutputVerticalResolution = ToResolution(ModeInfo.OutputVerticalResolution, ModeInfo.OutputVideoMode);
        OutputVerticalRefreshRate = ToRefreshRate(ModeInfo.OutputVerticalRate);
        OutputAspectRatio = ToAspectRatio(ModeInfo.OutputAspectRatio, ModeInfo.OutputNonLinearStretchActive);
        OutputStyleLabel = await Client.GetStyleLabelAsync(ModeInfo.OutputStyle);
        OutputCmsLabel = await Client.GetCmsLabelAsync(ModeInfo.OutputCms);
        Disabled = false;
    }

    protected RenderFragment RenderLabel(string id, string title, string value) {
        return @<div class="form-group row">
            <label for=@id class="col-sm col-xl-3 col-form-label">@title</label>
            <div class="col-sm col-xl-3">
                <input class="form-control" id=@id value=@value readonly>
            </div>
        </div>;
    }

    protected string ToResolution(string resolution, RadianceProVideoMode mode) {
        switch(mode) {
        case RadianceProVideoMode.Progressive:
            return resolution + "p";
        case RadianceProVideoMode.Interlaced:
            return resolution + "i";
        default:
            return resolution + $" ({mode})";
        }
    }

    protected string ToAspectRatio(string aspectRatio, bool nls = false) {
        var result = (aspectRatio.Length == 3) && aspectRatio.All(c => char.IsDigit(c))
            ? $"{aspectRatio[0]}.{aspectRatio.Substring(1)}"
            : aspectRatio;
        return nls
            ? result + " (NLS)"
            : result;
    }

    protected string ToRefreshRate(string refreshRate)
        => refreshRate switch {
            "023" => "23.98 FPS",
            "024" => "24 FPS",
            "025" => "25 FPS",
            "029" => "29.97 FPS",
            "030" => "30 FPS",
            "050" => "50 FPS",
            "059" => "59.94 FPS",
            "060" => "60 FPS",
            _ => refreshRate
        };
}